import { app, BrowserWindow, dialog, Menu, nativeTheme, ipcMain } from 'electron';
import { updateElectronApp, UpdateSourceType } from 'update-electron-app';
import { commandList } from './app/commandList';
import * as fs from 'fs';
import * as path from 'path';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow | null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

updateElectronApp({
  updateSource: {
    type: UpdateSourceType.ElectronPublicUpdateService,
    repo: 'ByoungInKim/file-changer',
    host: 'https://update.electronjs.org'
  },
  updateInterval: '5 minutes'
})

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      devTools: false,
    },
  });

  nativeTheme.themeSource = 'light';
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.webContents.openDevTools();
  const menu = Menu.buildFromTemplate([
    {
      label: '파일',
      submenu: [
        {
          label: '파일 추가하기',
          click: async () => {
            if (mainWindow) {
              const result = await dialog.showOpenDialog(mainWindow, {
                properties: ['openFile', 'multiSelections'],
              });
              if (result.filePaths.length > 0) {
                mainWindow.webContents.send('file-opened', result.filePaths);
              }
            }
          },
        },
        {
          label: '적용하기',
          click: async () => {
            if (mainWindow) {
              mainWindow.webContents.send('apply');
            }
          },
        },
      ],
    },
    {
      label: '앞에 추가',
      submenu: [
        {
          label: commandList['forward_1']['sub_cmd'],
          click: async () => {
            if (mainWindow) {
                mainWindow.webContents.send('modal-open', commandList['forward_1']);
            }
          },
        },
      ],
    },
  ]);

  ipcMain.handle('rename-file', async (event, oldName, newName) => {
    //const oldPath = path.join(__dirname, 'uploads', oldName);
    //const newPath = path.join(__dirname, 'uploads', newName);
  
    try {
      fs.renameSync(oldName, newName);
      return '파일 이름 변경 성공';
    } catch (error) {
      return `파일 이름 변경 실패: ${error.message}`;
    }
  });

  Menu.setApplicationMenu(menu);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});


// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
